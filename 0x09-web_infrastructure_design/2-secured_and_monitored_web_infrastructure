https://imgur.com/a/r5Z3CY2



# Network overview
The network consists of three physical servers. The new server is a necessary redundancy to avoid downtimes in case of updating codebase or server failure.
A load balancer distributes user requests among the three physical servers based on a weighted scheduling algorithm.

# Security
A firewall exists between each load balancer and server, ensuring filtering requests from unwanted IP addresses and enhancing security.
Adding HTTPS to the network means that data is encrypted before it is sent over the internet.
A client’s request undergoes the HTTPS handshake. Data is encrypted through asymmetric encryption, where the client generates a public-private key pair.
The public key is sent over the internet to the server to encrypt the data. The private key remains in the client’s computer and is used to decrypt the data.
The website’s server must send its SSL certificate to the client to confirm its identity before the session begins.
The client verifies the certificate’s digital signature with its known list of trusted certificates.
It then queries trusted certificate authorities if the SSL certificate is not on this list. 

# Issues
The load balancer introduces SSL termination, the decryption of encrypted data before forwarding it to the servers.
The challenge of SSL termination is that it presents a vulnerability on the server side. Unencrypted HTTP sessions are easily readable by others.
Another network challenges include having all software server components on one physical server.
It deters horizontal scaling and means that all the virtual servers fail if the physical server fails. It is also difficult to pinpoint the problem within this server setting.
Relying on one master MySQL server also makes it difficult to scale horizontally.
Vertical scaling can be done by increasing the CPU and RAM of the physical server. However, the approach has its bottlenecks.
Asynchronous replication of slave databases also creates room for potential data loss should the master fail before the slaves are updated.

# Monitoring
Another addition is three monitoring clients. In this case, DataDog would be a viable monitoring client for monitoring both the physical and software servers.
It would assess the CPU and memory utilization, state of network adapters, system errors, and event logs.
The network administrator can assess queries per second (QPS) for each virtual web server.
DataDog provides event logs for total queries, successfully handled, and dropped queries.
The monitoring clients will also provide performance metrics such as request processing time.
Finally, monitoring helps identify server and client errors and take appropriate measures.
